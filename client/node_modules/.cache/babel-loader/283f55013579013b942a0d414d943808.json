{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, emailSignInSuccess, emailSignInFailure, checkUserSession } from './user.actions';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, checkUserSession);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["C:/users/nikos val/myshopapp/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","signInSuccess","signInFailure","emailSignInSuccess","emailSignInFailure","checkUserSession","signInWithGoogle","user","signInWithPopup","getSnapshotFromUserAuth","error","userAuth","userRef","userSnapshot","get","id","data","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,GAAnB,EAAuBC,GAAvB,EAA2BC,IAA3B,QAAsC,oBAAtC;AACA,SAAQC,IAAR,EAAaC,cAAb,EAA4BC,yBAA5B,EAAsDC,cAAtD,QAA2E,+BAA3E;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,aAAR,EAAsBC,aAAtB,EAAoCC,kBAApC,EAAuDC,kBAAvD,EAA2EC,gBAA3E,QAAkG,gBAAlG;AAEA,OAAO,UAAUC,gBAAV,GAA4B;AACnC,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMX,IAAI,CAACY,eAAL,CAAqBX,cAArB,CAAnB;AACA,UAAMY,uBAAuB,CAACF,IAAD,CAA7B;AACH,GAHD,CAKA,OAAMG,KAAN,EAAY;AACZ,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACC;AACA;AAED,OAAO,UAAUD,uBAAV,CAAkCE,QAAlC,EAA2C;AAC9C,MAAG;AACH,UAAMC,OAAO,GAAC,MAAMjB,IAAI,CAACG,yBAAD,EAA2Ba,QAA3B,CAAxB;AACA,UAAME,YAAY,GAAC,MAAMD,OAAO,CAACE,GAAR,EAAzB;AACA,UAAMrB,GAAG,CAAEQ,aAAa,CAAE;AAACc,MAAAA,EAAE,EAACF,YAAY,CAACE,EAAjB;AAAoB,SAAGF,YAAY,CAACG,IAAb;AAAvB,KAAF,CAAf,CAAT;AAEC,GALD,CAKC,OAAMN,KAAN,EAAY;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACF;AACJ;AAED,OAAO,UAAUO,mBAAV,GAA+B;AAClC,QAAMzB,UAAU,CAACQ,eAAe,CAACkB,oBAAjB,EAAsCZ,gBAAtC,CAAhB;AAEH;AAED,OAAO,UAAUa,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAA1B,EAAqD;AAC5D,MAAI;AACJ,UAAM;AAACf,MAAAA;AAAD,QAAO,MAAMX,IAAI,CAAC2B,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAAnB;AACA,UAAMb,uBAAuB,CAACF,IAAD,CAA7B;AACC,GAHD,CAGC,OAAMG,KAAN,EAAY;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACF;AAEA;AAED,OAAO,UAAUc,mBAAV,GAA+B;AAElC,MAAG;AACA,UAAMb,QAAQ,GAAC,MAAMZ,cAAc,EAAnC;AACA,QAAG,CAACY,QAAJ,EAAc;AACd,UAAMF,uBAAuB,CAACE,QAAD,CAA7B;AAGF,GAND,CAMC,OAAMD,KAAN,EAAY;AAET,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUe,kBAAV,GAA8B;AACjC,QAAMjC,UAAU,CAACQ,eAAe,CAAC0B,mBAAjB,EAAqCP,eAArC,CAAhB;AACH;AAED,OAAO,UAAUQ,kBAAV,GAA8B;AACjC,QAAMnC,UAAU,CAACQ,eAAe,CAAC4B,kBAAjB,EAAoCvB,gBAApC,CAAhB;AACH;AAED,OAAO,UAAUwB,SAAV,GAAqB;AACxB,QAAMnC,GAAG,CAAC,CAACC,IAAI,CAACsB,mBAAD,CAAL,EAA2BtB,IAAI,CAAC8B,kBAAD,CAA/B,EAAoD9B,IAAI,CAAC6B,mBAAD,CAAxD,CAAD,CAAT;AAEH","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\r\nimport {auth,googleProvider,createUserProfileDocument,getCurrentUser} from '../../firebase/firebase.utils';\r\nimport UserActionTypes from './user.types';\r\nimport {signInSuccess,signInFailure,emailSignInSuccess,emailSignInFailure, checkUserSession} from './user.actions';\r\n\r\nexport function* signInWithGoogle(){\r\ntry{\r\n    const {user}=yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n}\r\n\r\ncatch(error){\r\nyield put(signInFailure(error));\r\n}\r\n}\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth){\r\n    try{\r\n    const userRef=yield call(createUserProfileDocument,userAuth);\r\n    const userSnapshot=yield userRef.get();\r\n    yield put (signInSuccess ({id:userSnapshot.id,...userSnapshot.data()})\r\n    );\r\n    }catch(error){\r\n       yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle);\r\n\r\n}\r\n\r\nexport function* signInWithEmail({payload:{email,password}}){\r\ntry {\r\nconst {user}=yield auth.signInWithEmailAndPassword(email,password);\r\nyield getSnapshotFromUserAuth(user);\r\n}catch(error){\r\n   yield put(signInFailure(error));\r\n}\r\n\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n\r\n    try{\r\n       const userAuth=yield getCurrentUser();\r\n       if(!userAuth) return;\r\n       yield getSnapshotFromUserAuth(userAuth);\r\n\r\n\r\n    }catch(error){\r\n\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,checkUserSession);\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart),call(isUserAuthenticated)]);\r\n\r\n}"]},"metadata":{},"sourceType":"module"}